{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","types/ErrorAction.ts","components/NotificationError.tsx","components/PostDetails.tsx","api.ts","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","setSelectPost","selectPost","length","className","map","post","id","title","type","classNames","onClick","handleClick","Loader","NewCommentForm","handleAddComment","postId","isLoading","EMPTY_FORM_DATA","name","email","body","useState","formData","setFormData","errors","setErrors","handleChange","event","target","value","prevFormData","onSubmit","preventDefault","newErrors","test","newComment","prev","htmlFor","placeholder","onChange","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","ErrorTypes","client","NotificationError","errorMessage","labelData","PostDetails","comments","setComments","setIsLoading","errorType","setErrorType","isOpen","setIsOpen","useEffect","getComments","result","catch","COMMENTS","finally","handleDeleteComent","commentId","filter","comment","deleteComment","DELETE","toString","href","ADD","UserSelector","users","getPostsById","isActive","setActive","selectUser","setSelectUser","dropdownRef","useRef","onBlur","current","classList","contains","remove","ref","role","user","onMouseDown","handleSelectUser","App","setUsers","setPosts","isSelectedUser","setIsSelectedUser","USERS","getPosts","POSTS","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be924542.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  setSelectPost: (post:Post | null) => void;\n  selectPost : Post | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSelectPost,\n  selectPost,\n}) => {\n  const handleClick = (post:Post | null) => {\n    if (selectPost === post) {\n      setSelectPost(null);\n    } else {\n      setSelectPost(post);\n    }\n  };\n\n  return (\n    <>\n      {posts.length\n        ? (\n          <div data-cy=\"PostsList\">\n            <p className=\"title\">Posts:</p>\n            <table\n              className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n            >\n              <thead>\n                <tr className=\"has-background-link-light\">\n                  <th>#</th>\n                  <th>Title</th>\n                  <th> </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {posts.map(post => {\n                  const { id, title } = post;\n\n                  return (\n                    <tr data-cy=\"Post\" key={id}>\n                      <td data-cy=\"PostId\">{id}</td>\n\n                      <td data-cy=\"PostTitle\">\n                        {title}\n                      </td>\n\n                      <td className=\"has-text-right is-vcentered\">\n                        <button\n                          type=\"button\"\n                          data-cy=\"PostButton\"\n                          className={classNames(\n                            'button',\n                            'is-link',\n                            { 'is-light': selectPost?.id !== id },\n                          )}\n                          onClick={() => handleClick(post)}\n                        >\n                          {selectPost?.id === id ? 'Close' : 'Open'}\n                        </button>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )\n        : (\n          <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n            No posts yet\n          </div>\n        )}\n    </>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  handleAddComment: (data: CommentData) => void;\n  postId: number;\n  isLoading: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddComment,\n  postId,\n  isLoading,\n}) => {\n  const EMPTY_FORM_DATA = {\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [formData, setFormData] = useState({ ...EMPTY_FORM_DATA });\n\n  const [errors, setErrors] = useState({ ...EMPTY_FORM_DATA });\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }));\n  };\n\n  const validateEmail = (email:string) => {\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n    if (emailPattern.test(email)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newErrors = EMPTY_FORM_DATA;\n\n    if (!formData.name) {\n      newErrors.name = 'Name is required';\n    }\n\n    if (!formData.email || (!validateEmail(formData.email))) {\n      newErrors.email = 'Email is required';\n    }\n\n    if (!formData.body) {\n      newErrors.body = 'Enter some text';\n    }\n\n    setErrors(newErrors);\n\n    if ((newErrors.body || newErrors.email || newErrors.name) === '') {\n      const newComment = { ...formData, postId };\n\n      handleAddComment(newComment);\n      setFormData(prev => ({ ...prev, body: '' }));\n    }\n  };\n\n  const handleClear = () => {\n    setFormData(EMPTY_FORM_DATA);\n\n    setErrors(EMPTY_FORM_DATA);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': errors.name },\n            )}\n            value={formData.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.name}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': errors.email },\n            )}\n            value={formData.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.email}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'input',\n              { 'is-danger': errors.body },\n            )}\n            value={formData.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.body}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorTypes {\n  ADD = 'Something went wrong on comment add!',\n  POSTS = 'Something went wrong on posts load!',\n  USERS = 'Something went wrong on users load!',\n  DELETE = 'Something went wrong on comment delete!',\n  COMMENTS = 'Something went wrong on comments load!',\n}\n","type Props = {\n  errorMessage: string;\n  labelData : string;\n};\n\nexport const NotificationError: React.FC<Props> = ({\n  errorMessage,\n  labelData,\n}) => {\n  return (\n    <div\n      className=\"notification is-danger\"\n      data-cy={labelData}\n    >\n      {errorMessage}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\nimport { deleteComment, getComments, addComment } from '../api';\nimport { ErrorTypes } from '../types/ErrorAction';\nimport { NotificationError } from './NotificationError';\n\ntype Props = {\n  selectPost:Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorType, setErrorType] = useState<ErrorTypes | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const { id, title, body } = selectPost;\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsOpen(false);\n    setComments([]);\n    getComments(id)\n      .then(result => {\n        setComments(result);\n      })\n      .catch(() => {\n        setErrorType(ErrorTypes.COMMENTS);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [selectPost]);\n\n  const handleDeleteComent = (commentId:number) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n    deleteComment(commentId)\n      .catch(() => {\n        setComments([...comments]);\n        setErrorType(ErrorTypes.DELETE);\n      });\n  };\n\n  const handleOpenNewForm = () => {\n    setIsOpen(true);\n  };\n\n  const handleAddComment = (data: CommentData) => {\n    setIsLoading(true);\n    addComment(data)\n      .then(result => {\n        setComments(prev => {\n          return [\n            ...prev,\n            result,\n          ];\n        });\n      })\n      .catch(() => {\n        setErrorType(ErrorTypes.ADD);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n          {!isLoading && (\n            <>\n              {comments.length > 0 || errorType ? (\n                <p className=\"title is-4\">Comments:</p>\n              ) : (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n            </>\n          )}\n\n          {errorType === ErrorTypes.COMMENTS && (\n            <NotificationError\n              errorMessage={ErrorTypes.COMMENTS.toString()}\n              labelData=\"CommentsError\"\n            />\n          )}\n\n          {comments.map(comment => {\n            const { email, name } = comment;\n\n            return (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                    {name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComent(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            );\n          })}\n          {(!isOpen && !isLoading && !errorType) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleOpenNewForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n        {errorType === ErrorTypes.DELETE && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"PostsLoadingError\"\n          >\n            {errorType}\n          </div>\n        )}\n        {isOpen && (\n          <NewCommentForm\n            handleAddComment={handleAddComment}\n            postId={selectPost.id}\n            isLoading={isLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Comment, CommentData } from './types/Comment';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (id:number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getComments = (id:number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const addComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (id:number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import classNames from 'classnames';\nimport React, { useRef, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  getPostsById: (id:number) => void;\n  setSelectPost: (post:Post | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  getPostsById,\n  setSelectPost,\n}) => {\n  const [isActive, setActive] = useState(false);\n  const [selectUser, setSelectUser] = useState<User | null>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const handleToggle = () => {\n    setActive(!isActive);\n  };\n\n  const handleSelectUser = (user:User) => {\n    setSelectUser(user);\n    setActive(false);\n    getPostsById(user.id);\n    setSelectPost(null);\n  };\n\n  const handleBlur = () => {\n    if (dropdownRef.current\n      && dropdownRef.current.classList.contains('is-active')) {\n      dropdownRef.current.classList.remove('is-active');\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActive },\n      )}\n      onBlur={handleBlur}\n      ref={dropdownRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleToggle}\n        >\n          <span>\n            {selectUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.name === selectUser?.name },\n              )}\n              key={user.id}\n              onMouseDown={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers, getPosts } from './api';\nimport { Post } from './types/Post';\nimport { ErrorTypes } from './types/ErrorAction';\nimport { NotificationError } from './components/NotificationError';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorType, setErrorType] = useState<ErrorTypes | null>(null);\n  const [isSelectedUser, setIsSelectedUser] = useState(false);\n  const [selectPost, setSelectPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(result => {\n        setUsers(result);\n      })\n      .catch(() => {\n        setErrorType(ErrorTypes.USERS);\n      });\n  }, []);\n\n  const getPostsById = (id:number) => {\n    setIsLoading(true);\n    getPosts(id)\n      .then(result => {\n        setPosts(result);\n        setIsSelectedUser(true);\n      })\n      .catch(() => {\n        setErrorType(ErrorTypes.POSTS);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  getPostsById={getPostsById}\n                  setSelectPost={setSelectPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!isSelectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {errorType === ErrorTypes.USERS && (\n                  <NotificationError\n                    errorMessage={ErrorTypes.USERS.toString()}\n                    labelData=\"PostsLoadingError\"\n                  />\n                )}\n\n                {errorType === ErrorTypes.POSTS && (\n                  <NotificationError\n                    errorMessage={ErrorTypes.POSTS.toString()}\n                    labelData=\"PostsLoadingError\"\n                  />\n                )}\n\n                {isLoading && <Loader />}\n\n                {(isSelectedUser && !isLoading) && (\n                  <PostsList\n                    posts={posts}\n                    setSelectPost={setSelectPost}\n                    selectPost={selectPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectPost && (<PostDetails selectPost={selectPost} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}